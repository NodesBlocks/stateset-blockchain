syntax = "proto3";
package stateset.liquidity;

import "gogoproto/gogo.proto";
import "liquidity.proto";
import "google/api/annotations.proto";
import "cosmos_proto/pagination.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/stateset/stateset-blockchain/liquidity/types";

// Query defines the gRPC querier service for liquidity module.
service Query {
    // Get all liquidity pools currently existed with each liquidity pool with batch and metadata
    rpc Pools (QueryPoolsRequest) returns (QueryPoolsResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/pools";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "It returns list of all liquidity pools currently existed with batch, metadata and paging results containing next_key and total count.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }

    // Get all liquidity pools batch
    rpc PoolsBatch (QueryPoolsBatchRequest) returns (QueryPoolsBatchResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/batch";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "It returns list of all batch that all currently existing pools and paging results containing next_key and total count.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }

    // Get a liquidity pool with liquidity pool batch by pool_id
    rpc Pool (QueryPoolRequest) returns (QueryPoolResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/{pool_id}";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "It returns the liquidity pool with batch and metadata containing total pool coin supply and reserved coins corresponding to the requested pool_id.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }

    // Get a liquidity pool batch by pool_id
    rpc PoolBatch (QueryPoolBatchRequest) returns (QueryPoolBatchResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/{pool_id}/batch";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "It returns the liquidity pool batch corresponding to the requested pool_id.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }

    // Get all pool batch swap messages of the liquidity pool
    rpc PoolBatchSwapMsgs(QueryPoolBatchSwapMsgsRequest) returns (QueryPoolBatchSwapMsgsResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/{pool_id}/batch/swaps";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "It returns list of all currently existing swap messages of the batch and paging results containing next_key and total count.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }

    // Get all pool batch deposit messages of the liquidity pool
    rpc PoolBatchDepositMsgs(QueryPoolBatchDepositMsgsRequest) returns (QueryPoolBatchDepositMsgsResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/{pool_id}/batch/deposits";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "It returns list of all currently existing deposit messages of the batch and paging results containing next_key and total count.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }

    // Get all pool batch withdraw messages of the liquidity pool
    rpc PoolBatchWithdrawMsgs(QueryPoolBatchWithdrawMsgsRequest) returns (QueryPoolBatchWithdrawMsgsResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/{pool_id}/batch/withdraws";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "It returns list of all currently existing withdraw messages of the batch and paging results containing next_key and total count.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }

    // Parameters queries the liquidity parameters.
    rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
        option (google.api.http).get = "/stateset/liquidity/v1beta1/params";
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "returns current parameter of the liquidity module.";
            responses: {
                key: "500"
                value: {
                    description: "Internal Server Error"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
            responses: {
                key: "400"
                value: {
                    description: "Bad Request"
                    examples: {
                        key: "application/json"
                        value: '{ "code": 0, "message": "error description example, see details https://bit.ly/3moTlO9"}'
                    }
                }
            }
        };
    }
}

// the request type for the QueryPool RPC method. requestable specified pool_id.
message QueryPoolRequest {
    uint64 pool_id = 1;
}

// the response type for the QueryPoolResponse RPC method. It returns the liquidity pool with batch and metadata containing total pool coin supply and reserved coins corresponding to the requested pool_id.
message QueryPoolResponse {
    Pool liquidity_pool = 1 [(gogoproto.nullable) = false];
    PoolMetadata liquidity_pool_metadata = 2 [(gogoproto.nullable) = false];
    PoolBatch liquidity_pool_batch = 3 [(gogoproto.nullable) = false];
}

// the request type for the QueryPoolBatch RPC method. requestable including specified pool_id.
message QueryPoolBatchRequest {
    // id of the target pool for query
    uint64 pool_id = 1;
}

// the response type for the QueryPoolBatchResponse RPC method. It returns the liquidity pool batch corresponding to the requested pool_id.
message QueryPoolBatchResponse {
    PoolBatch batch = 1 [(gogoproto.nullable) = false];
}

// the request type for the QueryPools RPC method. requestable including pagination offset, limit, key.
message QueryPoolsRequest {
    // pagination defines an optional pagination for the request.
    cosmos.query.PageRequest pagination = 1;
}

// the response type for the QueryPoolsResponse RPC method. This includes list of all liquidity pools currently existed and paging results containing next_key and total count.
message QueryPoolsResponse {
    repeated QueryPoolResponse pools = 1 [(gogoproto.nullable) = false];
    // pagination defines the pagination in the response. not working on this version.
    cosmos.query.PageResponse pagination = 2;
}

// the request type for the QueryPoolsBatch RPC method, requestable including pagination offset, limit, key.
message QueryPoolsBatchRequest {
    // pagination defines an optional pagination for the request.
    cosmos.query.PageRequest pagination = 1;
}

// the response type for the QueryPoolsBatchResponse RPC method. This includes list of all batches that all currently existing pools and paging results containing next_key and total count.
message QueryPoolsBatchResponse {
    repeated QueryPoolBatchResponse pools_batch = 1 [(gogoproto.nullable) = false];
    // pagination defines the pagination in the response. not working on this version.
    cosmos.query.PageResponse pagination = 2;
}

// QueryParamsRequest is request type for the QueryParams RPC method.
message QueryParamsRequest {}

// the response type for the QueryParamsResponse RPC method. This includes current parameter of the liquidity module.
message QueryParamsResponse {
    // params holds all the parameters of this module.
    Params params = 1 [(gogoproto.nullable) = false];
}

// the request type for the QueryPoolBatchSwap RPC method. requestable including specified pool_id and pagination offset, limit, key.
message QueryPoolBatchSwapMsgsRequest {
    // id of the target pool for query
    uint64 pool_id = 1;
    // pagination defines an optional pagination for the request.
    cosmos.query.PageRequest pagination = 2;
}

// the response type for the QueryPoolBatchSwap RPC method. This includes list of all currently existing swap messages of the batch and paging results containing next_key and total count.
message QueryPoolBatchSwapMsgsResponse {
    repeated BatchPoolSwapMsg swaps = 1 [(gogoproto.nullable) = false];
    // pagination defines the pagination in the response. not working on this version.
    cosmos.query.PageResponse pagination = 2;
}

// the request type for the QueryPoolBatchDeposit RPC method. requestable including specified pool_id and pagination offset, limit, key.
message QueryPoolBatchDepositMsgsRequest {
    // id of the target pool for query
    uint64 pool_id = 1;
    // pagination defines an optional pagination for the request.
    cosmos.query.PageRequest pagination = 2;
}

// the response type for the QueryPoolBatchDeposit RPC method. This includes a list of all currently existing deposit messages of the batch and paging results containing next_key and total count.
message QueryPoolBatchDepositMsgsResponse {
    repeated BatchPoolDepositMsg deposits = 1 [(gogoproto.nullable) = false];
    // pagination defines the pagination in the response. not working on this version.
    cosmos.query.PageResponse pagination = 2;
}

// the request type for the QueryPoolBatchWithdraw RPC method. requestable including specified pool_id and pagination offset, limit, key.
message QueryPoolBatchWithdrawMsgsRequest {
    // id of the target pool for query
    uint64 pool_id = 1;
    // pagination defines an optional pagination for the request.
    cosmos.query.PageRequest pagination = 2;
}

// the response type for the QueryPoolBatchWithdraw RPC method. This includes a list of all currently existing withdraw messages of the batch and paging results containing next_key and total count.
message QueryPoolBatchWithdrawMsgsResponse {
    repeated BatchPoolWithdrawMsg withdraws = 1 [(gogoproto.nullable) = false];
    // pagination defines the pagination in the response. not working on this version.
    cosmos.query.PageResponse pagination = 2;
}