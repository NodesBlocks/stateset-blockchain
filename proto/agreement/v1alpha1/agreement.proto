syntax = "proto3";
package stateset.agreement.v1alpha1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/stateset/stateset-blockchain/x/agreements/types";

message Agreement {
  string creator = 1;
  string agreement_id = 2;
  string agreementNumber = 3; 
  string agreementName = 4; 
  string agreementType = 5; 
  string agreementStatus = 6; 
  string totalAgreementValue = 7; 
  string party = 8; 
  string counterparty = 9; 
  string agreementStartDate = 10; 
  string agreementEndDate = 11;
}

message MsgCreateAgreement {
  string creator = 1;
  string agreement_id = 2;
  string agreementNumber = 3; 
  string agreementName = 4; 
  string agreementType = 5; 
  string agreementStatus = 6; 
  string totalAgreementValue = 7; 
  string party = 8; 
  string counterparty = 9; 
  string agreementStartDate = 10; 
  string agreementEndDate = 11; 
}

message MsgUpdateAgreement {
  string creator = 1;
  string agreement_id = 2;
  string agreementNumber = 3; 
  string agreementName = 4; 
  string agreementType = 5; 
  string agreementStatus = 6; 
  string totalAgreementValue = 7; 
  string party = 8; 
  string counterparty = 9; 
  string agreementStartDate = 10; 
  string agreementEndDate = 11; 
}

message MsgDeleteAgreement {
  string creator = 1;
  string agreement_id = 2;
}

message MsgActivateAgreement {
  string creator = 1;
  string agreement_id = 2;
}

message MsgAmendAgreement {
  string creator = 1;
  string agreement_id = 2;
}

message MsgRenewAgreement {
  string creator = 1;
  string agreement_id = 2;
}

message MsgTerminateAgreement {
  string creator = 1;
  string agreement_id = 2;
}

message MsgExpireAgreement {
  string creator = 1;
  string agreement_id = 2;
}

service Msg {

  rpc Create(MsgCreateAgreement) returns (MsgCreateAgreementResponse);

  rpc Activate(MsgActivateAgreement) returns (MsgActivateAgreementResponse);

  rpc Renew(MsgRenewAgreement) returns (MsgRenewAgreementResponse);

  rpc Amend(MsgAmendAgreement) returns (MsgAmendAgreementResponse);

  rpc Terminate(MsgTerminateAgreement) returns (MsgTerminateAgreementResponse);

  rpc Expire(MsgExpireAgreement) returns (MsgExpireAgreement);

}


service Query {

  rpc Status(QueryStatusRequest) returns (QueryStatusResponse) {
    option (google.api.http).get = "/stateset/agreement/status/{id}";

  }
}